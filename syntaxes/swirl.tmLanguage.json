{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Swirl",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#func&class"
        },
        {
            "include": "#datatype"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "func&class": {
            "patterns": [
                {
                    "name": "entity.name.function.swirl",
                    "match": "(?<=func )(\\w+)(?=\\((.*)?\\))"
                },
                {
                    "name": "variable.parameter",
                    "match": "(?<=func (\\w+).*\\(.*(int|string) )\\w+(?=.*\\).*)"
                },
                {
                    "name": "storage.type.function.swirl",
                    "match": "\\bfunc\\b"
                },
                {
                    "name": "storage.type.class.swirl",
                    "match": "\\bclass\\b"
                },
                {
                    "name": "support.function.builtin.swirl",
                    "match": "(print|input|range|find|count|findall|string|int|float|bool|len|exit)(?=\\(.*?\\))"
                },
                {
                    "name": "entity.name.function.swirl",
                    "match": "\\w+(?=\\(.*\\))"
                },
                {
                    "begin": "\\bclass\\b\\s(.+)\\((.*?)\\)",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ],
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.class.swirl"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block",
                    "begin": "///",
                    "end": "///"
                },
                {
                    "name": "comment.line",
                    "match": "//.*"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.swirl",
                    "match": "(\\+|\\-|\\*|\\/|\\%)(?!=)"
                },
                {
                    "name": "keyword.operator.bitwise.swirl",
                    "match": "(&|\\||\\^|\\~|<<|>>)(?!=)"
                },
                {
                    "name": "keyword.operator.assignment.swirl",
                    "match": "(=|\\+\\+|--|\\+=|-=|\\*=|\/=)(?!=)"
                },
                {
                    "name": "keyword.operator.comparison.swirl",
                    "match": "(==|\\!=|\\<=|\\>=|\\<|\\>)(?!=)"
                },
                {
                    "name": "keyword.control.swirl",
                    "match": "\\b(for|while|in|override|private|public|protected|is|static)\\b"
                },
                {
                    "name": "constant.language.swirl",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "keyword.control.import.swirl",
                    "match": "\\bimport\\s(?=.*)"
                },
                {
                    "name": "keyword.class.swirl",
                    "match": "\\binherits\\b"
                },
                {
                    "name": "keyword.control.conditional.swirl",
                    "match": "\\b(if|elif|else)\\b"
                },
                {
                    "name": "keyword.control.flow.swirl",
                    "match": "\\b(break|continue|return)\\b"
                },
                {
                    "name": "keyword.control.operator.swirl",
                    "match": "\\b(and|or)\\b"
                }
            ]
        },
        "datatype": {
            "patterns": [
                {
                    "name": "entity.name.type.swirl",
                    "match": "\\b(int|string|float|bool|list|void)\\b"
                },
                {
                    "name": "storage.type.const.swirl",
                    "match": "\\bconst\\b"
                },
                {
                    "name": "storage.type.var.swirl",
                    "match": "\\bvar\\b"
                },
                {
                    "name": "constant.numeric.swirl",
                    "match": "\\b\\d+\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double",
                    "begin": "\"",
                    "end": "\""
                },
                {
                    "name": "string.quoted.single",
                    "begin": "'",
                    "end": "'"
                }
            ]
        }
    },
    "scopeName": "source.swirl"
}